// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: food/v1/shop.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShopService_ListCollectionShop_FullMethodName       = "/api.food.v1.shop.ShopService/ListCollectionShop"
	ShopService_CreateCollectionShop_FullMethodName     = "/api.food.v1.shop.ShopService/CreateCollectionShop"
	ShopService_RemoveCollectionShop_FullMethodName     = "/api.food.v1.shop.ShopService/RemoveCollectionShop"
	ShopService_GetCollectionShopById_FullMethodName    = "/api.food.v1.shop.ShopService/GetCollectionShopById"
	ShopService_UpdateCollectionShopById_FullMethodName = "/api.food.v1.shop.ShopService/UpdateCollectionShopById"
)

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServiceClient interface {
	ListCollectionShop(ctx context.Context, in *ListCollectionShopRequest, opts ...grpc.CallOption) (*ListCollectionShopReply, error)
	CreateCollectionShop(ctx context.Context, in *CreateCollectionShopRequest, opts ...grpc.CallOption) (*CreateCollectionShopReply, error)
	RemoveCollectionShop(ctx context.Context, in *RemoveCollectionShopRequest, opts ...grpc.CallOption) (*RemoveCollectionShopReply, error)
	GetCollectionShopById(ctx context.Context, in *GetCollectionShopByIdRequest, opts ...grpc.CallOption) (*GetCollectionShopByIdReply, error)
	UpdateCollectionShopById(ctx context.Context, in *UpdateCollectionShopByIdRequest, opts ...grpc.CallOption) (*UpdateCollectionShopByIdReply, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) ListCollectionShop(ctx context.Context, in *ListCollectionShopRequest, opts ...grpc.CallOption) (*ListCollectionShopReply, error) {
	out := new(ListCollectionShopReply)
	err := c.cc.Invoke(ctx, ShopService_ListCollectionShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CreateCollectionShop(ctx context.Context, in *CreateCollectionShopRequest, opts ...grpc.CallOption) (*CreateCollectionShopReply, error) {
	out := new(CreateCollectionShopReply)
	err := c.cc.Invoke(ctx, ShopService_CreateCollectionShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) RemoveCollectionShop(ctx context.Context, in *RemoveCollectionShopRequest, opts ...grpc.CallOption) (*RemoveCollectionShopReply, error) {
	out := new(RemoveCollectionShopReply)
	err := c.cc.Invoke(ctx, ShopService_RemoveCollectionShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetCollectionShopById(ctx context.Context, in *GetCollectionShopByIdRequest, opts ...grpc.CallOption) (*GetCollectionShopByIdReply, error) {
	out := new(GetCollectionShopByIdReply)
	err := c.cc.Invoke(ctx, ShopService_GetCollectionShopById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) UpdateCollectionShopById(ctx context.Context, in *UpdateCollectionShopByIdRequest, opts ...grpc.CallOption) (*UpdateCollectionShopByIdReply, error) {
	out := new(UpdateCollectionShopByIdReply)
	err := c.cc.Invoke(ctx, ShopService_UpdateCollectionShopById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
// All implementations must embed UnimplementedShopServiceServer
// for forward compatibility
type ShopServiceServer interface {
	ListCollectionShop(context.Context, *ListCollectionShopRequest) (*ListCollectionShopReply, error)
	CreateCollectionShop(context.Context, *CreateCollectionShopRequest) (*CreateCollectionShopReply, error)
	RemoveCollectionShop(context.Context, *RemoveCollectionShopRequest) (*RemoveCollectionShopReply, error)
	GetCollectionShopById(context.Context, *GetCollectionShopByIdRequest) (*GetCollectionShopByIdReply, error)
	UpdateCollectionShopById(context.Context, *UpdateCollectionShopByIdRequest) (*UpdateCollectionShopByIdReply, error)
	mustEmbedUnimplementedShopServiceServer()
}

// UnimplementedShopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShopServiceServer struct {
}

func (UnimplementedShopServiceServer) ListCollectionShop(context.Context, *ListCollectionShopRequest) (*ListCollectionShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionShop not implemented")
}
func (UnimplementedShopServiceServer) CreateCollectionShop(context.Context, *CreateCollectionShopRequest) (*CreateCollectionShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollectionShop not implemented")
}
func (UnimplementedShopServiceServer) RemoveCollectionShop(context.Context, *RemoveCollectionShopRequest) (*RemoveCollectionShopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollectionShop not implemented")
}
func (UnimplementedShopServiceServer) GetCollectionShopById(context.Context, *GetCollectionShopByIdRequest) (*GetCollectionShopByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionShopById not implemented")
}
func (UnimplementedShopServiceServer) UpdateCollectionShopById(context.Context, *UpdateCollectionShopByIdRequest) (*UpdateCollectionShopByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionShopById not implemented")
}
func (UnimplementedShopServiceServer) mustEmbedUnimplementedShopServiceServer() {}

// UnsafeShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServiceServer will
// result in compilation errors.
type UnsafeShopServiceServer interface {
	mustEmbedUnimplementedShopServiceServer()
}

func RegisterShopServiceServer(s grpc.ServiceRegistrar, srv ShopServiceServer) {
	s.RegisterService(&ShopService_ServiceDesc, srv)
}

func _ShopService_ListCollectionShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ListCollectionShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ListCollectionShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ListCollectionShop(ctx, req.(*ListCollectionShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CreateCollectionShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CreateCollectionShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_CreateCollectionShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CreateCollectionShop(ctx, req.(*CreateCollectionShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_RemoveCollectionShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollectionShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).RemoveCollectionShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_RemoveCollectionShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).RemoveCollectionShop(ctx, req.(*RemoveCollectionShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetCollectionShopById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionShopByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetCollectionShopById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_GetCollectionShopById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetCollectionShopById(ctx, req.(*GetCollectionShopByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_UpdateCollectionShopById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionShopByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).UpdateCollectionShopById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_UpdateCollectionShopById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).UpdateCollectionShopById(ctx, req.(*UpdateCollectionShopByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopService_ServiceDesc is the grpc.ServiceDesc for ShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.food.v1.shop.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCollectionShop",
			Handler:    _ShopService_ListCollectionShop_Handler,
		},
		{
			MethodName: "CreateCollectionShop",
			Handler:    _ShopService_CreateCollectionShop_Handler,
		},
		{
			MethodName: "RemoveCollectionShop",
			Handler:    _ShopService_RemoveCollectionShop_Handler,
		},
		{
			MethodName: "GetCollectionShopById",
			Handler:    _ShopService_GetCollectionShopById_Handler,
		},
		{
			MethodName: "UpdateCollectionShopById",
			Handler:    _ShopService_UpdateCollectionShopById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "food/v1/shop.proto",
}
