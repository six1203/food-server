// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.3
// source: food/v1/shop.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopServiceCreateCollectionShop = "/api.food.v1.shop.ShopService/CreateCollectionShop"
const OperationShopServiceGetCollectionShopById = "/api.food.v1.shop.ShopService/GetCollectionShopById"
const OperationShopServiceListCollectionShop = "/api.food.v1.shop.ShopService/ListCollectionShop"
const OperationShopServiceRemoveCollectionShop = "/api.food.v1.shop.ShopService/RemoveCollectionShop"
const OperationShopServiceUpdateCollectionShopById = "/api.food.v1.shop.ShopService/UpdateCollectionShopById"

type ShopServiceHTTPServer interface {
	CreateCollectionShop(context.Context, *CreateCollectionShopRequest) (*CreateCollectionShopReply, error)
	GetCollectionShopById(context.Context, *GetCollectionShopByIdRequest) (*GetCollectionShopByIdReply, error)
	ListCollectionShop(context.Context, *ListCollectionShopRequest) (*ListCollectionShopReply, error)
	RemoveCollectionShop(context.Context, *RemoveCollectionShopRequest) (*RemoveCollectionShopReply, error)
	UpdateCollectionShopById(context.Context, *UpdateCollectionShopByIdRequest) (*UpdateCollectionShopByIdReply, error)
}

func RegisterShopServiceHTTPServer(s *http.Server, srv ShopServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/collection_shop/list", _ShopService_ListCollectionShop0_HTTP_Handler(srv))
	r.POST("/v1/collection_shop/create", _ShopService_CreateCollectionShop0_HTTP_Handler(srv))
	r.POST("/v1/collection_shop/remove", _ShopService_RemoveCollectionShop0_HTTP_Handler(srv))
	r.GET("/v1/collection_shop/{id}", _ShopService_GetCollectionShopById0_HTTP_Handler(srv))
	r.POST("/v1/collection_shop/{id}", _ShopService_UpdateCollectionShopById0_HTTP_Handler(srv))
}

func _ShopService_ListCollectionShop0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionShopRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceListCollectionShop)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollectionShop(ctx, req.(*ListCollectionShopRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionShopReply)
		return ctx.Result(200, reply)
	}
}

func _ShopService_CreateCollectionShop0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCollectionShopRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceCreateCollectionShop)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollectionShop(ctx, req.(*CreateCollectionShopRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCollectionShopReply)
		return ctx.Result(200, reply)
	}
}

func _ShopService_RemoveCollectionShop0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveCollectionShopRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceRemoveCollectionShop)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveCollectionShop(ctx, req.(*RemoveCollectionShopRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveCollectionShopReply)
		return ctx.Result(200, reply)
	}
}

func _ShopService_GetCollectionShopById0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionShopByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceGetCollectionShopById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionShopById(ctx, req.(*GetCollectionShopByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionShopByIdReply)
		return ctx.Result(200, reply)
	}
}

func _ShopService_UpdateCollectionShopById0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCollectionShopByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceUpdateCollectionShopById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCollectionShopById(ctx, req.(*UpdateCollectionShopByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCollectionShopByIdReply)
		return ctx.Result(200, reply)
	}
}

type ShopServiceHTTPClient interface {
	CreateCollectionShop(ctx context.Context, req *CreateCollectionShopRequest, opts ...http.CallOption) (rsp *CreateCollectionShopReply, err error)
	GetCollectionShopById(ctx context.Context, req *GetCollectionShopByIdRequest, opts ...http.CallOption) (rsp *GetCollectionShopByIdReply, err error)
	ListCollectionShop(ctx context.Context, req *ListCollectionShopRequest, opts ...http.CallOption) (rsp *ListCollectionShopReply, err error)
	RemoveCollectionShop(ctx context.Context, req *RemoveCollectionShopRequest, opts ...http.CallOption) (rsp *RemoveCollectionShopReply, err error)
	UpdateCollectionShopById(ctx context.Context, req *UpdateCollectionShopByIdRequest, opts ...http.CallOption) (rsp *UpdateCollectionShopByIdReply, err error)
}

type ShopServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShopServiceHTTPClient(client *http.Client) ShopServiceHTTPClient {
	return &ShopServiceHTTPClientImpl{client}
}

func (c *ShopServiceHTTPClientImpl) CreateCollectionShop(ctx context.Context, in *CreateCollectionShopRequest, opts ...http.CallOption) (*CreateCollectionShopReply, error) {
	var out CreateCollectionShopReply
	pattern := "/v1/collection_shop/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopServiceCreateCollectionShop))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopServiceHTTPClientImpl) GetCollectionShopById(ctx context.Context, in *GetCollectionShopByIdRequest, opts ...http.CallOption) (*GetCollectionShopByIdReply, error) {
	var out GetCollectionShopByIdReply
	pattern := "/v1/collection_shop/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceGetCollectionShopById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopServiceHTTPClientImpl) ListCollectionShop(ctx context.Context, in *ListCollectionShopRequest, opts ...http.CallOption) (*ListCollectionShopReply, error) {
	var out ListCollectionShopReply
	pattern := "/v1/collection_shop/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopServiceListCollectionShop))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopServiceHTTPClientImpl) RemoveCollectionShop(ctx context.Context, in *RemoveCollectionShopRequest, opts ...http.CallOption) (*RemoveCollectionShopReply, error) {
	var out RemoveCollectionShopReply
	pattern := "/v1/collection_shop/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopServiceRemoveCollectionShop))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopServiceHTTPClientImpl) UpdateCollectionShopById(ctx context.Context, in *UpdateCollectionShopByIdRequest, opts ...http.CallOption) (*UpdateCollectionShopByIdReply, error) {
	var out UpdateCollectionShopByIdReply
	pattern := "/v1/collection_shop/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopServiceUpdateCollectionShopById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
