// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.3
// source: food/v1/food.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFoodListCollectionShop = "/api.food.v1.Food/ListCollectionShop"
const OperationFoodLoginByUsername = "/api.food.v1.Food/LoginByUsername"

type FoodHTTPServer interface {
	ListCollectionShop(context.Context, *ListCollectionShopRequest) (*ListCollectionShopReply, error)
	LoginByUsername(context.Context, *LoginByUsernameRequest) (*LoginByUsernameReply, error)
}

func RegisterFoodHTTPServer(s *http.Server, srv FoodHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/login/byUsername", _Food_LoginByUsername0_HTTP_Handler(srv))
	r.POST("/v1/collection_shop/list", _Food_ListCollectionShop0_HTTP_Handler(srv))
}

func _Food_LoginByUsername0_HTTP_Handler(srv FoodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByUsernameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFoodLoginByUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByUsername(ctx, req.(*LoginByUsernameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginByUsernameReply)
		return ctx.Result(200, reply)
	}
}

func _Food_ListCollectionShop0_HTTP_Handler(srv FoodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionShopRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFoodListCollectionShop)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollectionShop(ctx, req.(*ListCollectionShopRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionShopReply)
		return ctx.Result(200, reply)
	}
}

type FoodHTTPClient interface {
	ListCollectionShop(ctx context.Context, req *ListCollectionShopRequest, opts ...http.CallOption) (rsp *ListCollectionShopReply, err error)
	LoginByUsername(ctx context.Context, req *LoginByUsernameRequest, opts ...http.CallOption) (rsp *LoginByUsernameReply, err error)
}

type FoodHTTPClientImpl struct {
	cc *http.Client
}

func NewFoodHTTPClient(client *http.Client) FoodHTTPClient {
	return &FoodHTTPClientImpl{client}
}

func (c *FoodHTTPClientImpl) ListCollectionShop(ctx context.Context, in *ListCollectionShopRequest, opts ...http.CallOption) (*ListCollectionShopReply, error) {
	var out ListCollectionShopReply
	pattern := "/v1/collection_shop/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFoodListCollectionShop))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FoodHTTPClientImpl) LoginByUsername(ctx context.Context, in *LoginByUsernameRequest, opts ...http.CallOption) (*LoginByUsernameReply, error) {
	var out LoginByUsernameReply
	pattern := "/v1/user/login/byUsername"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFoodLoginByUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
