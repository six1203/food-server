// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"food-server/internal/biz"
	"food-server/internal/conf"
	"food-server/internal/data"
	"food-server/internal/server"
	"food-server/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(config *conf.Config, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(config)
	client := data.NewRedis(config)
	dataData, cleanup, err := data.NewData(config, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(config, userRepo, logger)
	collectionShopRepo := data.NewCollectionShopRepo(dataData, logger)
	collectionShopUsecase := biz.NewCollectionShopUsecase(config, collectionShopRepo, logger)
	foodService := service.NewFoodService(userUsecase, collectionShopUsecase, logger)
	grpcServer := server.NewGRPCServer(config, foodService, logger)
	httpServer := server.NewHTTPServer(config, foodService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
